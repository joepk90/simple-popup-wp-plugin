!function(n){n(function(){var n=new SimplePopup;n.init()})}(jQuery);
var SimplePopup={};!function(t){SimplePopup=function(){this.options=options,this.popUp=t("undefined"!==this.options.jsPopupSelector?this.options.jsPopupSelector:".js-simple-popup"),this.jsEventClass="undefined"!==this.options.jsEventClass?this.options.jsEventClass:"js-set-cookie",this.cookieData=cookieData,this.cookie=this.getCookie(),this.getCookie=function(){var t=Cookies.get(this.cookieData.name);return void 0===t?null:t},this.setCookie=function(){Cookies.set(this.cookieData.name,this.cookieData.value,{expires:365})},this.displayPopup=function(){this.popUp.show()},this.hidePopup=function(){this.popUp.hide()},this.setupEvents=function(){var e=this;t(this.popUp).on("click",function(i){if(i.preventDefault(),t(i.target.hasClass(e.jsEventClass))!==!1){var o={button:{element:"button"},close:{element:"close"}},s="undefined"!==e.options.events?e.options.events:o;t(s).each(function(t){i.target.data("element")===t.element&&("undefined"!==t["function"]?t["function"]():(e.setCookie(),e.hidePopup()))})}})},this.init=function(){null===this.cookie&&(this.displayPopup(),this.setupEvents())}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvdXJjZS9qcy9zY3JpcHRzLmpzIiwic291cmNlL2pzL2NvbnRyb2xsZXJzL3NpbXBsZS1wb3B1cC5qcyJdLCJuYW1lcyI6WyIkIiwiJHNpbXBsZVBvcHVwIiwiU2ltcGxlUG9wdXAiLCJpbml0IiwialF1ZXJ5IiwidGhpcyIsIm9wdGlvbnMiLCJwb3BVcCIsImpzUG9wdXBTZWxlY3RvciIsImpzRXZlbnRDbGFzcyIsImNvb2tpZURhdGEiLCJjb29raWUiLCJnZXRDb29raWUiLCJDb29raWVzIiwiZ2V0IiwibmFtZSIsInVuZGVmaW5lZCIsInNldENvb2tpZSIsInNldCIsInZhbHVlIiwiZXhwaXJlcyIsImRpc3BsYXlQb3B1cCIsInNob3ciLCJoaWRlUG9wdXAiLCJoaWRlIiwic2V0dXBFdmVudHMiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldCIsImhhc0NsYXNzIiwiZGVmYXVsdEV2ZW50cyIsImJ1dHRvbiIsImVsZW1lbnQiLCJjbG9zZSIsImV2ZW50cyIsImVhY2giLCJldmVudCIsImRhdGEiXSwibWFwcGluZ3MiOiJDQUFBLFNBQVVBLEdBQ05BLEVBQUUsV0FHRSxHQWFJQyxHQUFlLEdBQUlDLFlBQ3ZCRCxHQUFhRSxVQUlsQkM7QUNoQkgsR0FBSUYsaUJBRUosU0FBVUYsR0FFRkUsWUFBYyxXQUNWRyxLQUFLQyxRQUFVQSxRQUNmRCxLQUFLRSxNQUF1RFAsRUFBZCxjQUFqQ0ssS0FBS0MsUUFBUUUsZ0JBQW9DSCxLQUFLQyxRQUFRRSxnQkFBcUIsb0JBQ2hHSCxLQUFLSSxhQUE2QyxjQUE5QkosS0FBS0MsUUFBUUcsYUFBK0JKLEtBQUtDLFFBQVFHLGFBQWUsZ0JBQzVGSixLQUFLSyxXQUFhQSxXQUNsQkwsS0FBS00sT0FBU04sS0FBS08sWUFFbkJQLEtBQUtPLFVBQVksV0FFYixHQUFJRCxHQUFTRSxRQUFRQyxJQUFJVCxLQUFLSyxXQUFXSyxLQUV6QyxPQUFjQyxVQUFYTCxFQUE2QixLQUV6QkEsR0FJWE4sS0FBS1ksVUFBWSxXQUNiSixRQUFRSyxJQUFJYixLQUFLSyxXQUFXSyxLQUFNVixLQUFLSyxXQUFXUyxPQUFTQyxRQUFTLE9BR3hFZixLQUFLZ0IsYUFBZSxXQUNoQmhCLEtBQUtFLE1BQU1lLFFBR2ZqQixLQUFLa0IsVUFBWSxXQUNibEIsS0FBS0UsTUFBTWlCLFFBR2ZuQixLQUFLb0IsWUFBYyxXQUVmLEdBQUl4QixHQUFlSSxJQUVuQkwsR0FBRUssS0FBS0UsT0FBT21CLEdBQUcsUUFBUyxTQUFTQyxHQUkvQixHQUZBQSxFQUFFQyxpQkFFRTVCLEVBQUUyQixFQUFFRSxPQUFPQyxTQUFTN0IsRUFBYVEsa0JBQW1CLEVBQXhELENBR0EsR0FBSXNCLElBQ0FDLFFBQ0lDLFFBQVMsVUFFYkMsT0FDSUQsUUFBUyxVQUliRSxFQUF5QyxjQUFoQ2xDLEVBQWFLLFFBQVE2QixPQUF5QmxDLEVBQWFLLFFBQVE2QixPQUFTSixDQUV6Ri9CLEdBQUVtQyxHQUFRQyxLQUFLLFNBQVVDLEdBRWpCVixFQUFFRSxPQUFPUyxLQUFLLGFBQWVELEVBQU1KLFVBR1osY0FBbkJJLEVBQUFBLFlBR0FBLEVBQUFBLGVBSUFwQyxFQUFhZ0IsWUFDYmhCLEVBQWFzQixvQkFXakNsQixLQUFLRixLQUFPLFdBR1ksT0FBaEJFLEtBQUtNLFNBRVROLEtBQUtnQixlQUNMaEIsS0FBS29CLGtCQUlsQnJCIiwiZmlsZSI6ImFsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJCkgeyAvLyByZWZlcmVuY2UgcXVlcnlcbiAgICAkKGZ1bmN0aW9uKCkgeyAvLyBzaG9ydGhhbmQgZm9yIG9uTG9hZCgpXG5cbiAgICAgICAgLy8gWydidXR0b24nLCAnY2xvc2UnXVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC8vICdqc1BvcHVwU2VsZWN0b3InXG4gICAgICAgICAgICAvLyAnanNFdmVudENsYXNzJzogJycsXG4gICAgICAgICAgICAvLyAgICdldmVudHMnOiBbe1xuICAgICAgICAgICAgLy8gJ2VsZW1lbnQnOiAnYnV0dG9uJyxcbiAgICAgICAgICAgIC8vICdmdW5jdGlvbic6IGZ1bmN0aW9uKClcbiAgICAgICAgICAgIC8vIH1dLFxuICAgICAgICAgICAgLy8gJ2Nvb2tpZURhdGEnOiB7XG4gICAgICAgICAgICAvLyAgICAgbmFtZTogJ3dpcGYtYW5kLXN0b2NrJyxcbiAgICAgICAgICAgIC8vICAgICB2YWx1ZTogXCJjb29raWUtcHJpdmFjeS1wb2xpY3lcIlxuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciAkc2ltcGxlUG9wdXAgPSBuZXcgU2ltcGxlUG9wdXAoKTtcbiAgICAgICAgJHNpbXBsZVBvcHVwLmluaXQoKTtcblxuXG4gICAgfSk7XG59KShqUXVlcnkpO1xuXG4iLCIvKipcbiAqIENsYXNzOiBTdXBhcHJlc3NDYXJ0XG4gKi9cblxuLy8gaW1wb3J0IENvb2tpZXMgZnJvbSAnanMtY29va2llJztcblxudmFyIFNpbXBsZVBvcHVwID0ge307XG5cbihmdW5jdGlvbigkKSB7IC8vIHJlZmVyZW5jZSBqcXVlcnlcblxuICAgICAgICBTaW1wbGVQb3B1cCA9IGZ1bmN0aW9uICgpICB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgdGhpcy5wb3BVcCA9IHRoaXMub3B0aW9ucy5qc1BvcHVwU2VsZWN0b3IgIT09ICd1bmRlZmluZWQnID8gJCh0aGlzLm9wdGlvbnMuanNQb3B1cFNlbGVjdG9yKSA6ICQoJy5qcy1zaW1wbGUtcG9wdXAnKTtcbiAgICAgICAgICAgIHRoaXMuanNFdmVudENsYXNzID0gdGhpcy5vcHRpb25zLmpzRXZlbnRDbGFzcyAhPT0gJ3VuZGVmaW5lZCcgPyB0aGlzLm9wdGlvbnMuanNFdmVudENsYXNzIDogJ2pzLXNldC1jb29raWUnO1xuICAgICAgICAgICAgdGhpcy5jb29raWVEYXRhID0gY29va2llRGF0YTtcbiAgICAgICAgICAgIHRoaXMuY29va2llID0gdGhpcy5nZXRDb29raWUoKTtcblxuICAgICAgICAgICAgdGhpcy5nZXRDb29raWUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBjb29raWUgPSBDb29raWVzLmdldCh0aGlzLmNvb2tpZURhdGEubmFtZSk7XG5cbiAgICAgICAgICAgICAgICBpZihjb29raWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29va2llO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNldENvb2tpZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIENvb2tpZXMuc2V0KHRoaXMuY29va2llRGF0YS5uYW1lLCB0aGlzLmNvb2tpZURhdGEudmFsdWUsIHsgZXhwaXJlczogMzY1IH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5UG9wdXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcFVwLnNob3coKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuaGlkZVBvcHVwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3BVcC5oaWRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNldHVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgJHNpbXBsZVBvcHVwID0gdGhpcztcblxuICAgICAgICAgICAgICAgICQodGhpcy5wb3BVcCkub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJChlLnRhcmdldC5oYXNDbGFzcygkc2ltcGxlUG9wdXAuanNFdmVudENsYXNzKSkgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBtZXJnZSBkZWZhdWx0IGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEV2ZW50cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6ICdidXR0b24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAnY2xvc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9ICRzaW1wbGVQb3B1cC5vcHRpb25zLmV2ZW50cyAhPT0gJ3VuZGVmaW5lZCcgPyAkc2ltcGxlUG9wdXAub3B0aW9ucy5ldmVudHMgOiBkZWZhdWx0RXZlbnRzO1xuXG4gICAgICAgICAgICAgICAgICAgICQoZXZlbnRzKS5lYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZGF0YSgnZWxlbWVudCcpID09PSBldmVudC5lbGVtZW50KSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5mdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjdXN0b20gb3ZlcnJpZGUgZnVuY3Rpb24gaXMgZGVmaW5lZCwgdXNlIGN1c3RvbSBvdmVycmlkZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5mdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGRlZmF1bHQgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzaW1wbGVQb3B1cC5zZXRDb29raWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNpbXBsZVBvcHVwLmhpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gc3RvcCBzY3JpcHQgcnVubmluZyBpZiBjb29raWUgaXMgc2V0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29va2llICE9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlQb3B1cCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbn0pKGpRdWVyeSk7XG5cbiJdfQ==
