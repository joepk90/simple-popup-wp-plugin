!function(n){n(function(){var n=new SimplePopup({});n.init()})}(jQuery);
var SimplePopup={};!function(t){var i={name:"simple-popup-cookie",value:"cookie-privacy-policy"};SimplePopup=function(o){this.options=o,this.popUp=t(void 0!==this.options.jsPopupSelector?this.options.jsPopupSelector:".js-simple-popup"),this.jsEventClass=void 0!==this.options.jsEventClass?this.options.jsEventClass:"js-set-cookie",this.cookieData=void 0!==this.options.cookieData?this.options.cookieData:i,this.getCookie=function(){var t=Cookies.get(this.cookieData.name);return void 0===t?null:t},this.setCookie=function(){Cookies.set(this.cookieData.name,this.cookieData.value,{expires:365})},this.displayPopup=function(){this.popUp.show()},this.hidePopup=function(){this.popUp.hide()},this.defaultClickEvents=function(){this.setCookie(),this.hidePopup()},this.setupEvents=function(){var i=this;t(this.popUp).on("click",function(o){o.preventDefault();var s=t(o.target);if(s.hasClass(i.jsEventClass)!==!1){var e=[{element:"button","function":i.defaultClickEvents()},{element:"close","function":i.defaultClickEvents()}],n=void 0!==i.options.events?i.options.events:e;t(n).each(function(t,i){s.data("element")===i.element&&i["function"]()})}})},this.init=function(){null===this.getCookie()&&(this.displayPopup(),this.setupEvents())}}}(jQuery);
!function(e){var n;if("function"==typeof define&&define.amd&&(define(e),n=!0),"object"==typeof exports&&(module.exports=e(),n=!0),!n){var t=window.Cookies,o=window.Cookies=e();o.noConflict=function(){return window.Cookies=t,o}}}(function(){function e(){for(var e=0,n={};e<arguments.length;e++){var t=arguments[e];for(var o in t)n[o]=t[o]}return n}function n(e){return e.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}function t(o){function r(){}function i(n,t,i){if("undefined"!=typeof document){i=e({path:"/"},r.defaults,i),"number"==typeof i.expires&&(i.expires=new Date(1*new Date+864e5*i.expires)),i.expires=i.expires?i.expires.toUTCString():"";try{var c=JSON.stringify(t);/^[\{\[]/.test(c)&&(t=c)}catch(f){}t=o.write?o.write(t,n):encodeURIComponent(String(t)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),n=encodeURIComponent(String(n)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var u="";for(var a in i)i[a]&&(u+="; "+a,i[a]!==!0&&(u+="="+i[a].split(";")[0]));return document.cookie=n+"="+t+u}}function c(e,t){if("undefined"!=typeof document){for(var r={},i=document.cookie?document.cookie.split("; "):[],c=0;c<i.length;c++){var f=i[c].split("="),u=f.slice(1).join("=");t||'"'!==u.charAt(0)||(u=u.slice(1,-1));try{var a=n(f[0]);if(u=(o.read||o)(u,a)||n(u),t)try{u=JSON.parse(u)}catch(p){}if(r[a]=u,e===a)break}catch(p){}}return e?r[e]:r}}return r.set=i,r.get=function(e){return c(e,!1)},r.getJSON=function(e){return c(e,!0)},r.remove=function(n,t){i(n,"",e(t,{expires:-1}))},r.defaults={},r.withConverter=t,r}return t(function(){})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
